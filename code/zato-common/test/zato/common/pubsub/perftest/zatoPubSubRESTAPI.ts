/**
 * Automatically generated by @grafana/openapi-to-k6: 0.3.2
 * Do not edit manually.
 * Zato Pub/Sub REST API
 * REST API for Zato's publish/subscribe messaging system.

This API allows clients to:
- Publish messages to topics
- Subscribe to topics to receive messages
- Retrieve messages from subscribed topics
- Unsubscribe from topics

All operations require HTTP Basic Authentication.

 * Service version: 3.3.0
 */
import { URL } from "https://jslib.k6.io/url/1.0.0/index.js";

import http from "k6/http";
import type { Params, Response } from "k6/http";

import type {
  PostPubsubMessagesGet200,
  PostPubsubMessagesGetBody,
  PostPubsubTopicTopicNameBody,
  PublishResponse,
  SuccessResponse,
} from "./zatoPubSubRESTAPI.schemas";

/**
 * This is the base client to use for interacting with the API.
 */
export class ZatoPubSubRESTAPIClient {
  private cleanBaseUrl: string;
  private commonRequestParameters: Params;

  constructor(clientOptions: {
    baseUrl: string;
    commonRequestParameters?: Params;
  }) {
    this.cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, "");

    this.commonRequestParameters = clientOptions.commonRequestParameters || {};
  }

  /**
 * Publish a message to the specified topic. The user must have publish permissions for the topic.
Topic names are validated and must meet specific requirements.

 * @summary Publish a message to a topic
 */
  postPubsubTopicTopicName(
    topicName: string,
    postPubsubTopicTopicNameBody: PostPubsubTopicTopicNameBody,
    requestParameters?: Params,
  ): {
    response: Response;
    data: PublishResponse;
  } {
    const url = new URL(this.cleanBaseUrl + `/pubsub/topic/${topicName}`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(postPubsubTopicTopicNameBody),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
 * Subscribe to receive messages from the specified topic. The user must have subscribe permissions for the topic.
Topics are automatically created if they don't exist.

 * @summary Subscribe to a topic
 */
  postPubsubSubscribeTopicTopicName(
    topicName: string,
    requestParameters?: Params,
  ): {
    response: Response;
    data: SuccessResponse;
  } {
    const url = new URL(
      this.cleanBaseUrl + `/pubsub/subscribe/topic/${topicName}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
 * Remove subscription from the specified topic. The user must have subscribe permissions for the topic.
Unsubscribing from a non-subscribed topic is safe and returns success.

 * @summary Unsubscribe from a topic
 */
  postPubsubUnsubscribeTopicTopicName(
    topicName: string,
    requestParameters?: Params,
  ): {
    response: Response;
    data: SuccessResponse;
  } {
    const url = new URL(
      this.cleanBaseUrl + `/pubsub/unsubscribe/topic/${topicName}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
 * Get messages from all topics the user is subscribed to. Messages are delivered in priority order
(highest priority first), then by publish time (oldest first) within the same priority level.
Retrieved messages are automatically acknowledged and removed from the queue.

 * @summary Retrieve messages from subscribed topics
 */
  postPubsubMessagesGet(
    postPubsubMessagesGetBody?: PostPubsubMessagesGetBody,
    requestParameters?: Params,
  ): {
    response: Response;
    data: PostPubsubMessagesGet200;
  } {
    const url = new URL(this.cleanBaseUrl + `/pubsub/messages/get`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(postPubsubMessagesGetBody),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * Merges the provided request parameters with default parameters for the client.
   *
   * @param {Params} requestParameters - The parameters provided specifically for the request
   * @param {Params} commonRequestParameters - Common parameters for all requests
   * @returns {Params} - The merged parameters
   */
  private _mergeRequestParameters(
    requestParameters?: Params,
    commonRequestParameters?: Params,
  ): Params {
    return {
      ...commonRequestParameters, // Default to common parameters
      ...requestParameters, // Override with request-specific parameters
      headers: {
        ...(commonRequestParameters?.headers || {}), // Ensure headers are defined
        ...(requestParameters?.headers || {}),
      },
      cookies: {
        ...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
        ...(requestParameters?.cookies || {}),
      },
      tags: {
        ...(commonRequestParameters?.tags || {}), // Ensure tags are defined
        ...(requestParameters?.tags || {}),
      },
    };
  }
}
